<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="BaseWin2016_Build_Image_Packer_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuilImagePacker>true</ExistsBuilImagePacker>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target Name="BaseWin2016_Build_Image_Packer_Run">
        <CallTarget Targets="_BaseWin2016_Build_Image_Packer_RestoreDependencies" />
        <CallTarget Targets="_BaseWin2016_Build_Image_Packer_RestoreBaseImageFiles" />
        <CallTarget Targets="_BaseWin2016_Build_Image_Packer_Execute" />
    </Target>

    <Target Name="_BaseWin2016_Build_Image_Packer_RestoreDependencies">
        <SearchPackagesDirectoryForToolDirectory
            FileToLocate="Ops.Tools.BaseImage.Windows.0.1.0.nupkg"
            PackagesDirectory="$(DirPackages)">
            <Output
                PropertyName="DirPackagesBaseImageWindows"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolDirectory>
        <Message
            Condition="Exists('$(DirPackagesBaseImageWindows)')"
            Text="DirPackagesBaseImageWindows: $(DirPackagesBaseImageWindows)" />
        <Error
            Condition="!Exists('$(DirPackagesBaseImageWindows)')"
            Text="DirPackagesBaseImageWindows: $(DirPackagesBaseImageWindows)" />

        <NuGetInstall
            NuGetExecutablePath="$(ToolsExternalNuGetPath)"
            PackageName="Packer.Windows.x64"
            PackageVersion="$(ToolsExternalPackerVersion)"
            PackagesDirectory="$(DirPackages)"
            Sources="@(NuGetSources)"
            Condition=" '$(ToolsExternalPackerPath)' == 'UNDEFINED'"/>
        <SearchPackagesDirectoryForToolPath
            PackagesDirectory="$(DirPackages)"
            FileToLocate="packer.exe"
            Condition=" '$(ToolsExternalPackerPath)' == 'UNDEFINED' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalPackerPath" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Tool="$(ToolsExternalPackerPath)"
            Condition=" '$(ToolsExternalPackerPath)' != 'UNDEFINED' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalPackerPath" />
        </GetToolFullPath>
        <Message
            Text="The Packer executable was found at: $(ToolsExternalPackerPath)"
            Importance="low"
            Condition="Exists('$(ToolsExternalPackerPath)') " />
        <Error
            Text="Could not locate the Packer executable path. Cannot generate an image."
            Condition="!Exists('$(ToolsExternalPackerPath)') "/>
    </Target>

    <Target Name="_BaseWin2016_Build_Image_Packer_RestoreBaseImageFiles">
        <ItemGroup>
            <ScriptFiles Include="$(DirPackagesBaseImageWindows)\scripts\**\*" />
        </ItemGroup>

        <Copy
            SourceFiles="@(ScriptFiles)"
            DestinationFiles="@(ScriptFiles->'$(DirBuildTempScripts)\%(RecursiveDir)%(Filename)%(Extension)')" />

        <!--
        <Exec
            Command="$(ToolsExternalBerksPath) vendor ..\."
            WorkingDirectory="$(DirBuildTempCookbooks)\ops-tools-baseimage-windows" />
        -->
    </Target>

    <Target
        Name="_BaseWin2016_Build_Image_Packer_Execute"
        Condition=" '@(PackerImagesToBuild)' != '' "
        Outputs="%(PackerImagesToBuild.Identity)">
        <TemplateText
            Template="%(PackerImagesToBuild.FullPath)"
            Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FilePackerConfiguration" />
        </TemplateText>

        <Error
            Text="Expected $(FilePackerConfiguration) to point to a valid path but it does not."
            Condition="!Exists('$(FilePackerConfiguration)') " />

        <Message
            Text="Building $(FilePackerConfiguration) ..."
            Importance="normal"/>

        <Exec
            Command="&quot;$(ToolsExternalPackerPath)&quot; build -var-file=&quot;$(DirBuildTemp)\packer_variables.json&quot; &quot;$(FilePackerConfiguration)&quot;"
            WorkingDirectory="$(DirBuildTemp)" />
    </Target>
</Project>
